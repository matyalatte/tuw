name: build_all

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

env:
  TOOL_NAME: Tuw

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.check-tag.outputs.tag }}
      wx_version: ${{ steps.wx-version.outputs.version }}
    steps:

      - name: Check tag
        id: check-tag
        run: |
          if [[ ${{ github.ref }} == refs/tags/v* ]]; then
            TAG=$(echo ${{ github.ref }} | sed -e "s#refs/tags/##g")
          else
            TAG=$(echo ${{ github.sha }} | cut -c1-7)
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
        shell: bash

      - uses: actions/checkout@v4

      - name: Create Release Draft
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.check-tag.outputs.tag }}
          name: ${{ steps.check-tag.outputs.tag }}
          body: |
            ## Changelog

            - First Change
            - Second Change
          draft: true
          prerelease: false

  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2022
            exe_ext: .exe
            zip_ext: zip
            ucrt: ""
            arch_suffix: -x64
          - os: windows-11-arm
            exe_ext: .exe
            zip_ext: zip
            ucrt: ""
            arch_suffix: -arm64
          - os: windows-2022
            exe_ext: .exe
            zip_ext: zip
            ucrt: UCRT
            arch_suffix: 10-x64
          - os: windows-11-arm
            exe_ext: .exe
            zip_ext: zip
            ucrt: UCRT
            arch_suffix: 10-arm64
          - os: macos-14
            exe_ext: ""
            zip_ext: tar.xz
            ucrt: ""
            arch_suffix: "-arm64"
          - os: macos-14
            exe_ext: ""
            zip_ext: tar.xz
            ucrt: ""
            arch_suffix: "-universal"

    name: build (${{ matrix.os }}, ${{ matrix.arch_suffix }})
    runs-on: ${{ matrix.os }}
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Meson for Windows
        if: runner.os == 'Windows'
        run: pip install meson

      - name: Install Meson for Unix
        if: runner.os != 'Windows'
        run: pip3 install meson ninja

      - name: Prepare MSVC for Windows
        if: runner.os == 'Windows'
        uses: bus1/cabuild/action/msdevshell@v1
        with:
          architecture: x64

      - name: Build exe for Windows
        if: runner.os == 'Windows'
        run: batch_files/build.bat Release ${{ matrix.ucrt }}

      - name: Build exe for Unix
        if: (runner.os != 'Windows') && (matrix.arch_suffix != '-universal')
        run: ./shell_scripts/build.sh Release

      - name: Build universal binary for Unix
        if: (runner.os != 'Windows') && (matrix.arch_suffix == '-universal')
        run: ./shell_scripts/build_universal.sh Release

      - name: Show info about exe
        run: ./shell_scripts/exe_info.sh build/Release${{ matrix.ucrt }}/${{ env.TOOL_NAME }}${{ matrix.exe_ext }}
        shell: bash

      - name: Copy files
        run: |
          mkdir -p archive/${{ env.TOOL_NAME }}
          cp build/Release${{ matrix.ucrt }}/${{ env.TOOL_NAME }}${{ matrix.exe_ext }} archive/${{ env.TOOL_NAME }}
          cp examples/other_features/help/gui_definition.json archive/${{ env.TOOL_NAME }}
          cp docs/changelog.txt archive/${{ env.TOOL_NAME }}
          cp license.txt archive/${{ env.TOOL_NAME }}
        shell: bash

      - name: Archive release for Windows
        if: runner.os == 'Windows'
        run: |
          cd archive/${{ env.TOOL_NAME }}
          powershell Compress-Archive -Force -Path * -Destination ../${{ env.TOOL_NAME }}-${{ needs.setup.outputs.tag }}-${{ runner.os }}${{ matrix.arch_suffix }}.${{ matrix.zip_ext }}

      - name: Archive release for Unix
        if: runner.os != 'Windows'
        run: |
          cd archive
          tar -Jcvf ${{ env.TOOL_NAME }}-${{ needs.setup.outputs.tag }}-${{ runner.os }}${{ matrix.arch_suffix }}.${{ matrix.zip_ext }} ${{ env.TOOL_NAME }}

      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ needs.setup.outputs.tag }} archive/${{ env.TOOL_NAME }}-${{ needs.setup.outputs.tag }}-${{ runner.os }}${{ matrix.arch_suffix }}.${{ matrix.zip_ext }}

  build-ubuntu:
    name: build (${{ matrix.host }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - host: ubuntu-latest
            arch: x64
          - host: ubuntu-24.04-arm
            arch: arm64

    runs-on: ${{ matrix.host }}
    needs: setup
    steps:
      - uses: actions/checkout@v4

      - name: Build with docker
        run: |
          sudo apt-get update
          docker build -t tuw_ubuntu -f docker/ubuntu.dockerfile ./

      - name: Copy files
        run: |
          docker run --name tuw_ubuntu tuw_ubuntu
          docker cp tuw_ubuntu:/Tuw/build/Release/${{ env.TOOL_NAME }} ./
          mkdir -p archive/${{ env.TOOL_NAME }}
          cp ${{ env.TOOL_NAME }} archive/${{ env.TOOL_NAME }}
          cp examples/other_features/help/gui_definition.json archive/${{ env.TOOL_NAME }}
          cp docs/changelog.txt archive/${{ env.TOOL_NAME }}
          cp license.txt archive/${{ env.TOOL_NAME }}
        shell: bash

      - name: Show info about exe
        run: |
          ./shell_scripts/exe_info.sh ${{ env.TOOL_NAME }}
          ./shell_scripts/check_glibc_compatibility.sh ${{ env.TOOL_NAME }}
        shell: bash

      - name: Archive release for Unix
        run: |
          cd archive
          tar -Jcvf ${{ env.TOOL_NAME }}-${{ needs.setup.outputs.tag }}-${{ runner.os }}-${{ matrix.arch }}.tar.xz ${{ env.TOOL_NAME }}

      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ needs.setup.outputs.tag }} archive/${{ env.TOOL_NAME }}-${{ needs.setup.outputs.tag }}-${{ runner.os }}-${{ matrix.arch }}.tar.xz

  # Upload source files with subprojects
  upload-source:
    name: upload-source
    strategy:
      fail-fast: false

    runs-on: ubuntu-latest

    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install packages
        run: |
          sudo apt-get update
          sudo apt-get -y install libgtk-3-dev
          pip3 install meson ninja

      - name: Archive source files with subprojects
        run: |
          meson setup build
          cd build
          meson dist --include-subprojects --no-tests --allow-dirty
          cd meson-dist
          mv ${{ env.TOOL_NAME }}-undefined.tar.xz ${{ env.TOOL_NAME }}-${{ needs.setup.outputs.tag }}_source-with-subprojects.tar.xz

      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ needs.setup.outputs.tag }} build/meson-dist/${{ env.TOOL_NAME }}-${{ needs.setup.outputs.tag }}_source-with-subprojects.tar.xz
